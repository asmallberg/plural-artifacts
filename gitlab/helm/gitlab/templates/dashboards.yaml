apiVersion: platform.plural.sh/v1alpha1
kind: Dashboard
metadata:
  name: gitlab-postgres
  labels:
{{ include "gitlab-plural.labels" . | indent 4 }}
spec:
  name: postgres
  description: Monitoring for gitlab's postgres db
  timeslices: [30m, 1h, 2h, 1d]
  defaultTime: 30m
  labels:
  - name: instance
    query:
      query: pg_stat_database_tup_fetched{namespace="{{ .Release.Namespace }}"}
      label: instance
  graphs:
  - queries:
    - query: SUM(pg_stat_database_tup_fetched{instance=~"$instance"})
      legend: tuples fetched
    - query: SUM(pg_stat_database_tup_inserted{instance=~"$instance"})
      legend: tuples inserted
    - query: SUM(pg_stat_database_tup_updated{instance=~"$instance"})
      legend: tuples updated
    name: Storage Performance
  - queries:
    - query: pg_settings_max_connections{instance="$instance"}
      legend: connections
    name: Max Connections
  - queries:
    - query: avg(rate(process_cpu_seconds_total{instance="$instance"}[5m]) * 1000)
      legend: seconds
    name: CPU time
  - queries:
    - query: avg(rate(process_resident_memory_bytes{instance="$instance"}[5m]))
      legend: resident mem
    - query: avg(rate(process_virtual_memory_bytes{instance="$instance"}[5m]))
      legend: process mem
    format: bytes
    name: Memory utilization
  - queries:
    - query: process_open_fds{instance="$instance"}
      legend: fds
    name: Open file descriptors
  - queries:
    - query: pg_settings_max_wal_size_bytes{instance="$instance"}
      legend: WAL size
    format: bytes
    name: Max WAL size
  - queries:
    - query: irate(pg_stat_database_xact_commit{instance="$instance"}[5m])
      legend: commits
    - query: irate(pg_stat_database_xact_rollback{instance="$instance"}[5m])
      legend: rollbacks
    name: Transactions
  - queries:
    - query: pg_stat_database_blks_hit{instance="$instance"} / (pg_stat_database_blks_read{instance="$instance"} + pg_stat_database_blks_hit{instance="$instance"})
      legend: hit rate
    name: Cache hit rate
---
apiVersion: platform.plural.sh/v1alpha1
kind: Dashboard
metadata:
  name: gitaly
  labels:
{{ include "gitlab-plural.labels" . | indent 4 }}
spec:
  name: gitaly
  description: Monitoring for gitlab's gitaly storage service
  timeslices: [30m, 1h, 2h, 1d]
  defaultTime: 30m
  labels:
  - name: instance
    query:
      query: grpc_server_started_total{namespace="{{ .Release.Namespace }}"}
      label: instance
  graphs:
  - queries:
    - query: rate(process_cpu_seconds_total{container="gitaly"}[1m])
      legend: $pod cpu 
    name: CPU Utilization
  - queries:
    - query: avg(process_resident_memory_bytes{instance=~"$instance"})
      legend: resident memory
    - query: avg(go_memstats_next_gc_bytes{instance=~"$instance"})
      legend: gc waterline
    name: Memory
  - queries:
    - query: avg(go_goroutines{instance=~"$instance"})
      legend: goroutines
    - query: avg(process_open_fds{instance=~"$instance"})
      legend: file descriptors
    name: Resources
  - queries:
    - query: avg(avg_over_time(up{instance=~"$instance"}[1m]))
      legend: uptime
    name: Availability
  - queries:
    - query: sum without (grpc_method,grpc_service,grpc_type) (rate(grpc_server_started_total{instance=~"$instance"}[1m]))
      legend: request rate
    name: GRPC request rate
  - queries:
    - query: avg((kubelet_volume_stats_capacity_bytes{persistentvolumeclaim=~"repo-data-gitlab-gitaly-.*"} - kubelet_volume_stats_available_bytes{persistentvolumeclaim=~"repo-data-gitlab-gitaly-.*"}) / kubelet_volume_stats_capacity_bytes{persistentvolumeclaim=~"repo-data-gitlab-gitaly-.*"})
      legend: disk usage
    name: Persistent Volume Availability
---
apiVersion: platform.plural.sh/v1alpha1
kind: Dashboard
metadata:
  name: gitlab-rails
  labels:
{{ include "gitlab-plural.labels" . | indent 4 }}
spec:
  name: gitlab-rails
  description: Monitoring for gitlab's rails webservice
  timeslices: [30m, 1h, 2h, 1d]
  defaultTime: 30m
  labels:
  - name: pod
    query:
      query: ruby_process_resident_memory_bytes{namespace="{{ .Release.Namespace }}"}
      label: pod
  graphs:
  - queries:
    - query: avg(avg_over_time(ruby_process_resident_memory_bytes{pod=~"$pod"}[5m]))
      legend: avg memory utilization
    - query: max(max_over_time(ruby_process_resident_memory_bytes{pod=~"$pod"}[5m]))
      legend: max memory utilization
    name: Memory Usage
  - queries:
    - query: avg(avg_over_time(ruby_process_resident_memory_bytes{namespace="{{ .Release.Namespace }}"}[5m]))
      legend: avg $pod
    - query: max(max_over_time(ruby_process_resident_memory_bytes{namespace="{{ .Release.Namespace }}"}[5m]))
      legend: max $pod
    name: Memory Usage by Pod
  - queries:
    - query: avg(avg_over_time(ruby_process_cpu_seconds_total{pod=~"$pod"}[5m]))
      legend: avg cpu utilization
    - query: max(max_over_time(ruby_process_cpu_seconds_total{pod=~"$pod"}[5m]))
      legend: max cpu utilization
    name: CPU Usage
  - queries:
    - query: avg(avg_over_time(ruby_process_cpu_seconds_total{namespace="{{ .Release.Namespace }}"}[5m]))
      legend: avg $pod
    - query: max(max_over_time(ruby_process_cpu_seconds_total{namespace="{{ .Release.Namespace }}"}[5m]))
      legend: max $pod
    name: CPU Usage by Pod