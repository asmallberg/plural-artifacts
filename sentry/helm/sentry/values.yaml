# Default values for sentry.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

postgres:
  enabled: true
  team: plural
  user: sentry
  dbName: sentry
  ownerChart: sentry
  infix: ""

rabbitmq:
  vhostName: sentry
  cluster:
    name: rabbitmq
    namespace: rabbitmq 

configOverlays:
- name: web-cpu
  labels:
    platform.plural.sh/component: sentry-web
    platform.plural.sh/kind: deployment
    platform.plural.sh/resource: cpu
  spec:
    name: web cpu
    documentation: cpu requests for web deployment
    updates:
    - path: ['sentry', 'sentry', 'sentry', 'web', 'resources', 'requests', 'cpu']
- name: web-mem
  labels:
    platform.plural.sh/component: sentry-web
    platform.plural.sh/kind: deployment
    platform.plural.sh/resource: memory
  spec:
    name: web memory
    documentation: memory requests for web deployment
    updates:
    - path: ['sentry', 'sentry', 'sentry', 'web', 'resources', 'requests', 'memory']
- name: worker-cpu
  labels:
    platform.plural.sh/component: sentry-worker
    platform.plural.sh/kind: deployment
    platform.plural.sh/resource: cpu
  spec:
    name: worker cpu
    documentation: cpu requests for worker deployment
    updates:
    - path: ['sentry', 'sentry', 'sentry', 'worker', 'resources', 'requests', 'cpu']
- name: worker-mem
  labels:
    platform.plural.sh/component: sentry-worker
    platform.plural.sh/kind: deployment
    platform.plural.sh/resource: memory
  spec:
    name: worker memory
    documentation: memory requests for worker deployment
    updates:
    - path: ['sentry', 'sentry', 'sentry', 'worker', 'resources', 'requests', 'memory']
- name: clickhouse-cpu
  labels:
    platform.plural.sh/component: sentry-clickhouse
    platform.plural.sh/kind: statefulset
    platform.plural.sh/resource: cpu
  spec:
    name: clickhouse cpu
    documentation: cpu requests for clickhouse statefulset
    updates:
    - path: ['sentry', 'sentry', 'clickhouse', 'clickhouse', 'resources', 'requests', 'cpu']
- name: clickhouse-mem
  labels:
    platform.plural.sh/component: sentry-clickhouse
    platform.plural.sh/kind: statefulset
    platform.plural.sh/resource: memory
  spec:
    name: clickhouse memory
    documentation: memory requests for clickhouse statefulset
    updates:
    - path: ['sentry', 'sentry', 'clickhouse', 'clickhouse', 'resources', 'requests', 'memory']

sentry:
  asHook: false # TODO: check if this works for first deployments
  images:
    symbolicator:
      repository: dkr.plural.sh/sentry/getsentry/symbolicator
      tag: 23.5.0
    snuba:
      repository: dkr.plural.sh/sentry/getsentry/snuba
      tag: 23.5.0
    sentry:
      repository: dkr.plural.sh/sentry/getsentry/sentry
      tag: 23.5.0-plural3.0.0
    relay:
      repository: dkr.plural.sh/sentry/getsentry/relay
      tag: 23.5.0

  serviceAccount:
    enabled: true
    name: sentry

  externalPostgresql:
    host: plural-sentry
    port: 5432
    username: sentry
    existingSecret: sentry.plural-sentry.credentials.postgresql.acid.zalan.do
    existingSecretKey: password
    database: sentry
    sslMode: require

  postgresql:
    enabled: false
  
  kafka:
    enabled: false

  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
    image:
      repository: gcr.io/pluralsh/prom/statsd-exporter
      tag: v0.23.1

  redis:
    enabled: false

  rabbitmq:
    enabled: false
    host: rabbitmq.rabbitmq
    vhost: sentry

  nginx:
    enabled: false

  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      kubernetes.io/tls-acme: "true"
      cert-manager.io/cluster-issuer: letsencrypt-prod
      nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
  
  sentry:
    existingSecret: sentry-system-secret
    existingSecretKey: key
    web:
      autoscaling:
        enabled: true
      resources:
        requests:
          cpu: 50m
          memory: 350Mi
    worker:
      autoscaling:
        enabled: true
      resources:
        requests:
          cpu: 50m
          memory: 750Mi
    ingestConsumer:
      autoscaling:
        enabled: true
      resources:
        requests:
          cpu: 50m
          memory: 300Mi

  snuba:
    api:
      autoscaling:
        enabled: true
      resources:
        requests:
          cpu: 20m
          memory: 100Mi
    sessionsConsumer:
      resources:
        requests:
          cpu: 20m
          memory: 100Mi
    consumer:
      resources:
        requests:
          cpu: 20m
          memory: 100Mi
    outcomesConsumer:
      resources:
        requests:
          cpu: 20m
          memory: 100Mi
    replacer:
      resources:
        requests:
          cpu: 20m
          memory: 100Mi
    transactionsConsumer:
      resources:
        requests:
          cpu: 20m
          memory: 100Mi

  symbolicator:
    autoscaling:
      enabled: true
    api:
      resources:
        requests:
          cpu: 20m
          memory: 50Mi

  zookeeper:
    enabled: false

  clickhouse:
    enabled: false
    clickhouse:
      # image: 'gcr.io/pluralsh/yandex/clickhouse-server'
      # imageVersion: '20.8.9.6'
      # init:
      #   image: 'gcr.io/pluralsh/busybox'
      #   imageVersion: latest
      
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
  externalClickhouse:
    ## Hostname or ip address of external clickhouse
    ##
    host: service-sentry-clickhouse
    tcpPort: 9000
    httpPort: 8123
    username: admin
    password: change_me
    database: sentry
    clusterName: sentry
    singleNode: false
    # existingSecret: secret-name
    ## set existingSecretKey if key name inside existingSecret is different from 'postgres-password'
    # existingSecretKey: secret-key-name

  externalRedis:
    host: redis-master.redis
    password: ""

  externalKafka:
    host: kafka-kafka-bootstrap.kafka

  hooks:
    activeDeadlineSeconds: 600
    dbCheck:
      image:
        repository: gcr.io/pluralsh/library/busybox
        tag: 1.36.0

clickhouse:
  enabled: true
  cluster: sentry
  database: sentry

  user: admin
  password: change_me
  # -- Whether to use TLS connection connecting to ClickHouse
  secure: false
  # -- Whether to verify TLS certificate on connection to ClickHouse
  verify: false

  resources:
    requests:
      cpu: 150m
      memory: 300Mi
    limits:
      cpu: 500m
      memory: 1Gi
  securityContext:
    enabled: true
    runAsUser: 101
    runAsGroup: 101
    fsGroup: 101

  serviceType: ClusterIP
  persistence:
    enabled: true
    size: 20Gi

  ## -- Clickhouse cluster layout. (Experimental, use at own risk)
  ## For a full list of options, see https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md
  ## section on clusters and layouts.
  layout:
    ## -- The number of shards in the cluster.
    shardsCount: 1
    ## -- The number of replicas per shard. If ClickhouseKeeper is enabled this is ignored and permanently set to 3.
    replicasCount: 3
    ## -- The custom layout for the cluster. If ClickhouseKeeper is enabled this value appended and doesn't influence the layout of the first shard with its 3 replicas.
    shards: []
      # - files:
      #     keeper_config.xml: |
      #       <clickhouse>
      #           <include_from>/tmp/clickhouse-keeper/config.d/generated-keeper-settings.xml</include_from>
      #           <keeper_server incl="keeper_server">
      #               <path>/var/lib/clickhouse-keeper</path>
      #               <tcp_port>9181</tcp_port>
      #               <four_letter_word_white_list>*</four_letter_word_white_list>
      #               <coordination_settings>
      #                   <!-- <raft_logs_level>trace</raft_logs_level> -->
      #                   <raft_logs_level>information</raft_logs_level>
      #               </coordination_settings>
      #           </keeper_server>
      #       </clickhouse>
      #   replicas:
      #     - templates:
      #         podTemplate: pod-template-clickhouse-keeper
      #         replicaServiceTemplate: replica-service-template-clickhouse-keeper
      #     - templates:
      #         podTemplate: pod-template-clickhouse-keeper
      #         replicaServiceTemplate: replica-service-template-clickhouse-keeper
      #     - templates:
      #         podTemplate: pod-template-clickhouse-keeper
      #         replicaServiceTemplate: replica-service-template-clickhouse-keeper

  ## -- ClickHouse settings configuration.
  ## You can use this to override settings, for example `prometheus/port: 9363`
  ## For the full list of settings, see:
  ## - https://clickhouse.com/docs/en/operations/settings/settings/
  settings: {}
    # Uncomment those lines if you want to enable the built-in Prometheus HTTP endpoint in ClickHouse.
    # prometheus/endpoint: /metrics
    # prometheus/port: 9363
    # prometheus/metrics: true
    # prometheus/events: true
    # prometheus/asynchronous_metrics: true

  ## -- Default settings configuration for ClickHouse. !!! Please DO NOT override this !!!
  ## default_database is set automatically by the chart using the database value and cannot be overridden.
  defaultSettings:
    format_schema_path: /etc/clickhouse-server/config.d/

  ## -- specify additional user configs for ClickHouse. This will be added to
  ## the users.xml configuration. See
  ## https://github.com/Altinity/clickhouse-operator for details.
  additionalUsersConfig:

  backup:
    # https://github.com/AlexAkulov/clickhouse-backup
    enabled: false
    image:
      # -- Clickhouse backup image repository.
      repository: dkr.plural.sh/clickhouse/altinity/clickhouse-backup
      # -- ClickHouse backup image tag.
      tag: "1.5.0"
      # -- Image pull policy
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## Example:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []

    backup_user: backup
    # password in plain text because it's using in cronjob
    backup_password: backup_password
    # -- Use an existing secret name in the deployed namespace for the backup
    # password
    existingSecret: ""
    # -- Key in the existingSecret containing the password value
    existingSecretPasswordKey: ""
    backup_schedule: "0 0 * * *" # backup every day at 0:00

    # All options: https://github.com/AlexAkulov/clickhouse-backup#default-config
    env:
      - name: LOG_LEVEL
        value: "debug"
      - name: ALLOW_EMPTY_BACKUPS
        value: "true"
      - name: API_LISTEN
        value: "0.0.0.0:7171"
      # INSERT INTO system.backup_actions to execute backup
      - name: API_CREATE_INTEGRATION_TABLES
        value: "true"
      - name: BACKUPS_TO_KEEP_REMOTE
        value: "0"
      # Add settings for remote backup storage.


  serviceAccount:
    create: true
    annotations: {}
    name: ""

  pluralRunbook:
    enabled: true


kafkaTopic: # TODO: hack since the db init fails to create this topic. Remove in the future once it's fixed in snuba.
  enabled: true
  cluster: kafka
  namespace: kafka
